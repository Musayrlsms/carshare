function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var axios = _interopDefault(require('axios'));
var React = require('react');
var React__default = _interopDefault(React);
var framerMotion = require('framer-motion');
var reactBootstrapIcons = require('react-bootstrap-icons');
var ScrollContainer = _interopDefault(require('react-indiana-drag-scroll'));
var Magnifier = _interopDefault(require('react-magnifier'));
var reactPortal = require('react-portal');
var reactZoomPanPinch = require('react-zoom-pan-pinch');
var ReactSwipe = _interopDefault(require('react-swipe'));
var fileSaver = require('file-saver');
var Div100vh = _interopDefault(require('react-div-100vh'));
var KeyHandler = _interopDefault(require('react-key-handler'));
var usehooksTs = require('usehooks-ts');

var styles = {"lightboxjs":"_30i9K","slideshowContainer":"_3kSzL","slideshowBtn":"_tCjNO","closeIcon":"_2IJEr","iconsHeader":"_2Yv4j","prev1":"_1lgEi","next1":"_DDceb","icon":"_2Vept","prevIcon":"_2gxOL","nextIcon":"_3gp2w","mainImg":"_1Z8Jv","show":"_2crlL","displayHidden":"_34QvR","thumbnail":"_1R214","hoverShadow":"_3EuZy","center_content":"_3gzzO","thumbnails":"_3pfLz","thumbnailsWithCaption":"_Fp_rP","imageSlide":"_22ETc","thumbnailsOuterContainer":"_-wN_b","videoThumbnailsOuterContainer":"_KbOLW","imgTitleContainer":"_1j-pZ","thumbnailsAndCaption":"_1nxK_","htmlVideoOuterContainer":"_z-jNd","caption":"_2jJU2","galleryImg":"_lY1R_","slideshowAnimContainer":"_wTR3b","fullScreenContainer":"_11N04","imageInnerContainer":"_20Hp6","magnifyWrapper":"_3PObS","slideshowInnerContainer":"_1JRT_","slideshowInnerVideoContainer":"_1ni2w","slideshowInnerContainerThumbnails":"_GV0NM","lightboxContainer":"_3BNPD","slideshowAnimImg":"_j1nqC","controls":"_ABXHD","ytVideo":"_2eq8V","videoOuterContainer":"_1P3Wc","videoIconsHeader":"_qtY0U","lightbox":"_3cxVN","slidePane":"_1j9QR","imgTitle":"_2pA2G","slideshow_img":"_1yWyS","lightbox_img":"_3A0RO","slideshow_img_fullscreen":"_2yYOi","slideshowInnerContainerFullScreen":"_hWNoE","fullScreenLightboxImg":"_1ek8k","opacity-fade":"_2P48G","imageSliderThumbnails":"_1xBL9","light_icon":"_1kIQ4","dark_icon":"_1qbJe","light_header_icon":"_3DIHj","dark_header_icon":"_11aT5","magnifier-image":"_mdJQi","active":"_3sodH","inactiveThumbnailBorder":"_3bkUp","htmlVideo":"_sqvn-","react-transform-component":"_3Id1-","loader":"_3qqrl","rotation":"_1hUzk","day_loader":"_1itZw","night_loader":"_2TI_i","slideImageAndCaption":"_238y5","roundedBorder":"_2FvXV","maxWidthFull":"_oa5b0","maxWidthWithoutMagnifier":"_z-bHV","lightboxVideo":"_hGbhv","navigation-wrapper":"_1dVqh","dots":"_3MuXE","dot":"_3U2py","arrow":"_35l6Q","leftArrow":"_1I4Zg","rightArrow":"_1lqBv","arrow--disabled":"_37Xda","keen-slider__slide":"_2HBOE","navDotsMargin":"_1LtID","inactiveThumbnailBorderImgSlider":"_2y9OU","ytVideoImgSlider":"_2oAIc","outerYTVideoImgSlider":"_2-c5L","slick-slider":"_2XCYX","slick-slide":"_1P9zv","slick-list":"_Em9gH","imgSliderArrow":"_1Bey-","cursorPointer":"_3xuz3","embla":"_1cifY","embla__viewport":"_1mBUR","embla__container":"_Bqct9","embla__slide":"_1eJNe","embla__slide__img":"_1Vvwe","embla__slide__number":"_1iBR9","lightboxjs_icon":"_1fpgA","pointerEventsAuto":"_3rH7-"};

var wrapNums = function wrapNums(minNum, maxNum, v) {
  var rangeSize = maxNum - minNum;
  return ((v - minNum) % rangeSize + rangeSize) % rangeSize + minNum;
};
var shouldAutoplay = function shouldAutoplay(elem) {
  if (elem.type == 'yt' && elem.autoPlay != true && elem.autoPlay != 'true') {
    return false;
  } else if (elem.autoPlay == false || elem.autoPlay == 'false') {
    return false;
  }
  return true;
};
var getVideoHeight = function getVideoHeight(elem) {
  if (elem.videoHeight) {
    return elem.videoHeight;
  }
  return "200";
};
var getVideoWidth = function getVideoWidth(elem) {
  if (elem.videoWidth) {
    return elem.videoWidth;
  }
  return "900";
};

var thumbnailVariants = {
  visible: {
    opacity: 1,
    y: 0
  },
  hidden: {
    opacity: 0,
    y: 100
  }
};
var themes = {
  day: {
    background: 'white',
    iconColor: 'black',
    thumbnailBorder: 'solid transparent 2px',
    textColor: 'black'
  },
  night: {
    background: '#151515',
    iconColor: '#626b77',
    thumbnailBorder: 'solid rgb(107, 133, 206)  2px',
    textColor: '#626b77'
  },
  lightbox: {
    background: 'rgba(12, 12, 12, 0.93)',
    iconColor: '#626b77',
    thumbnailBorder: 'solid rgb(107, 133, 206) 2px',
    textColor: 'silver'
  }
};
var inactiveThumbnailBorder = 'solid transparent 2px';
var defaultTheme = 'night';
var mobileWidth = 768;
var SlideshowLightbox = function SlideshowLightbox(props) {
  var createCustomThumbnailBorder = function createCustomThumbnailBorder() {
    if (props.thumbnailBorder) {
      return "solid " + props.thumbnailBorder + " 2px";
    }
  };
  var _useState = React.useState([0, 0]),
    _useState$ = _useState[0],
    imgSlideIndex = _useState$[0],
    direction = _useState$[1],
    setImgSlideIndex = _useState[1];
  var _useState2 = React.useState(false),
    showModal = _useState2[0],
    setShowModal = _useState2[1];
  var _useState3 = React.useState(false),
    isSlideshowPlaying = _useState3[0],
    setIsSlideshowPlaying = _useState3[1];
  var _useState4 = React.useState([]),
    images = _useState4[0],
    setImages = _useState4[1];
  var _useState5 = React.useState(props.magnifyingGlass ? props.magnifyingGlass : false),
    magnifyingGlassFeature = _useState5[0];
  var _useState6 = React.useState(props.disableImageZoom ? props.disableImageZoom : false),
    disableZoom = _useState6[0],
    setDisableZoom = _useState6[1];
  var _useState7 = React.useState([]),
    previewImageElems = _useState7[0],
    setPreviewImageElems = _useState7[1];
  var slideIndex = wrapNums(0, images.length, imgSlideIndex);
  var _useState8 = React.useState({
      continuous: true,
      startSlide: 0,
      stopPropagation: true
    }),
    reactSwipeOptions = _useState8[0],
    setReactSwipeOptions = _useState8[1];
  var _useState9 = React.useState(props.slideshowInterval ? props.slideshowInterval : 1100),
    slideshowInterval = _useState9[0];
  var _useState10 = React.useState(props.rightArrowStyle ? props.rightArrowStyle : {}),
    rightArrowStyle = _useState10[0];
  var _useState11 = React.useState(props.leftArrowStyle ? props.leftArrowStyle : {}),
    leftArrowStyle = _useState11[0];
  var _useState12 = React.useState(false),
    zoomedIn = _useState12[0],
    setZoomedIn = _useState12[1];
  var _useState13 = React.useState(props.roundedImages ? props.roundedImages : false),
    isRounded = _useState13[0],
    setIsRounded = _useState13[1];
  var _useState14 = React.useState(false),
    isOpen = _useState14[0],
    setIsOpen = _useState14[1];
  var _useState15 = React.useState(props.showControls ? props.showControls : true),
    showControls = _useState15[0],
    setShowControls = _useState15[1];
  var _useState16 = React.useState(props.showFullScreenIcon ? props.showFullScreenIcon : true),
    displayFullScreenIcon = _useState16[0],
    setDisplayFullScreenIcon = _useState16[1];
  var _useState17 = React.useState(props.showThumbnailIcon ? props.showThumbnailIcon : true),
    displayThumbnailIcon = _useState17[0],
    setDisplayThumbnailIcon = _useState17[1];
  var _useState18 = React.useState(props.showSlideshowIcon ? props.showSlideshowIcon : true),
    setDisplaySlideshowIcon = _useState18[1];
  var _useState19 = React.useState(props.showMagnificationIcons ? props.showMagnificationIcons : true),
    displayMagnificationIcons = _useState19[0],
    setDisplayMagnificationIcons = _useState19[1];
  var _useState20 = React.useState(props.nextArrow ? props.nextArrow : null),
    nextArrowElem = _useState20[0];
  var _useState21 = React.useState(props.prevArrow ? props.prevArrow : null),
    prevArrowElem = _useState21[0];
  var _useState22 = React.useState(props.modalClose ? props.modalClose : "default"),
    modalCloseOption = _useState22[0];
  var _useState23 = React.useState(props.downloadImages ? props.downloadImages : false),
    showDownloadBtn = _useState23[0];
  var _useState24 = React.useState(props.rtl ? props.rtl : false),
    isRTL = _useState24[0];
  var _useState25 = React.useState(props.framework ? props.framework : ''),
    frameworkID = _useState25[0];
  var _useState26 = React.useState(props.lightboxIdentifier ? props.lightboxIdentifier : false),
    lightboxIdentifier = _useState26[0];
  var _useState27 = React.useState(props.fullScreen ? props.fullScreen : false),
    imageFullScreen = _useState27[0];
  var _useState28 = React.useState(props.licenseKey ? props.licenseKey : '');
  var _useState29 = React.useState(props.showLoader ? props.showLoader : false);
  var _useState30 = React.useState(props.showLoader ? props.showLoader : false),
    displayLoader = _useState30[0],
    setDisplayLoader = _useState30[1];
  var _useState31 = React.useState(false),
    videoCurrentlyPlaying = _useState31[0],
    setVideoCurrentlyPlaying = _useState31[1];
  var _useState32 = React.useState(0),
    width = _useState32[0],
    setWidth = _useState32[1];
  var _useState33 = React.useState(false),
    isBrowserFullScreen = _useState33[0],
    setIsBrowserFullScreen = _useState33[1];
  var _useState34 = React.useState(false),
    enableMagnifyingGlass = _useState34[0],
    setMagnifyingGlass = _useState34[1];
  var _useState35 = React.useState(false),
    imagesLoaded = _useState35[0],
    setImagesLoaded = _useState35[1];
  var _useState36 = React.useState(0),
    refIndex = _useState36[0],
    setRefIndex = _useState36[1];
  var imageRef = React.useRef(null);
  var _useState37 = React.useState(0),
    zoomIdx = _useState37[0],
    setZoomIdx = _useState37[1];
  var _useState38 = React.useState(500),
    imgContainHeight = _useState38[0],
    setImgContainHeight = _useState38[1];
  var _useState39 = React.useState(426),
    imgContainWidth = _useState39[0],
    setImgContainWidth = _useState39[1];
  var _useState40 = React.useState(false),
    isInit = _useState40[0],
    setIsInit = _useState40[1];
  var zoomRef = React.useRef(null);
  var _useState41 = React.useState(null);
  var _useState42 = React.useState([]);
  var zoomReferences = React.useRef([]);
  var videoReferences = React.useRef({});
  var _useState43 = React.useState(props.backgroundColor ? props.backgroundColor : themes[defaultTheme].background),
    backgroundColor = _useState43[0],
    setBackgroundColor = _useState43[1];
  var _useState44 = React.useState(props.iconColor ? props.iconColor : null),
    iconColor = _useState44[0];
  var _useState45 = React.useState(props.textColor ? props.textColor : themes[defaultTheme].textColor),
    textColor = _useState45[0],
    setTextColor = _useState45[1];
  var _useState46 = React.useState(props.useCoverMode ? props.useCoverMode : false),
    coverMode = _useState46[0];
  var _useState47 = React.useState(props.thumbnailBorder ? createCustomThumbnailBorder() : themes[defaultTheme].thumbnailBorder),
    thumbnailBorder = _useState47[0];
  var _useState48 = React.useState(props.showThumbnails ? props.showThumbnails : false),
    showThumbnails = _useState48[0],
    setShowThumbnails = _useState48[1];
  var _useState49 = React.useState(props.animateThumbnails ? props.animateThumbnails : true),
    animatedThumbnails = _useState49[0];
  var _useState50 = React.useState(props.imgAnimation ? props.imgAnimation : 'imgDrag'),
    setImgAnimation = _useState50[1];
  var _useState51 = React.useState(props.arrowStyle ? props.arrowStyle : 'dark'),
    arrowStyle = _useState51[0];
  var isMobile = width <= mobileWidth;
  var getLoaderThemeClass = function getLoaderThemeClass() {
    if (props.theme) {
      if (props.theme == 'night' || props.theme == 'lightbox') {
        return styles.night_loader;
      } else if (props.theme == 'day') {
        return styles.day_loader;
      }
    }
    return styles.night_loader;
  };
  var wheelEvent = function wheelEvent(ref, e) {
    setImgAnimation('fade');
  };
  var zoomEvent = function zoomEvent(ref, e) {
    if (ref.state.scale == 1) {
      setImgAnimation('imgDrag');
      setZoomedIn(false);
    } else {
      setZoomedIn(true);
    }
  };
  var isImageCaption = function isImageCaption() {
    if (props.images && props.images[slideIndex].caption) {
      return true;
    }
    return false;
  };
  var displayDownloadBtn = function displayDownloadBtn() {
    if (isVideo(slideIndex)) {
      return false;
    } else {
      return showDownloadBtn;
    }
  };
  function handleWindowResize() {
    setWidth(window.innerWidth);
  }
  var shouldDisplayMagnifyingGlassIcon = function shouldDisplayMagnifyingGlassIcon() {
    if (isVideo(slideIndex)) {
      return false;
    }
    if (isMobile == true) {
      return false;
    }
    if (imageFullScreen == true) {
      return false;
    }
    if (magnifyingGlassFeature == true) {
      return true;
    }
    return false;
  };
  var getImageStyle = function getImageStyle() {
    var styleObject = {};
    if (isRounded) {
      styleObject["borderRadius"] = "20px";
    }
    if (modalCloseOption == "clickOutside") {
      styleObject["pointerEvents"] = "auto";
    }
    return styleObject;
  };
  var shouldDisplaySlideshowIcon = function shouldDisplaySlideshowIcon() {
    if (images) {
      if (images.length == 1) {
        return false;
      }
    } else if (props.images) {
      if (props.images.length == 1) {
        return false;
      }
    }
    return true;
  };
  var thumbnailClick = function thumbnailClick(index) {
    initLoader(index);
    resetVideo();
    resetImage();
    setCurrentSlide(index);
  };
  var checkModalClick = function checkModalClick(e) {
    var modals = document.getElementsByClassName('imageModal');
    var arr_modals = Array.from(modals);
    for (var i = 0; i < arr_modals.length; i++) {
      var elem = arr_modals[i];
      var clickInside = elem.contains(e.target);
      if (clickInside) {
        return;
      }
    }
    closeModal();
  };
  var getRTLIndex = function getRTLIndex(img_gallery_length, i) {
    var index;
    if (i == 0) {
      index = img_gallery_length - 1;
    } else if (i == img_gallery_length - 1) {
      index = 0;
    } else {
      index = img_gallery_length - i - 1;
    }
    return index;
  };
  var fullScreen = function fullScreen() {
    var lightbox = document.getElementById('slideshowAnim');
    openFullScreen(lightbox);
    setIsBrowserFullScreen(true);
    initFullScreenChangeEventListeners();
  };
  var exitFullScreenHandler = function exitFullScreenHandler() {
    if (document['webkitIsFullScreen'] || document['mozFullScreen'] || document['msFullscreenElement']) {
      setIsBrowserFullScreen(true);
    } else {
      if (isBrowserFullScreen) {
        closeFullScreen(document);
      }
      removeFullScreenChangeEventListeners();
      setIsBrowserFullScreen(false);
    }
  };
  var exitFullScreen = function exitFullScreen() {
    closeFullScreen(document);
    removeFullScreenChangeEventListeners();
    setIsBrowserFullScreen(false);
  };
  var updateImageSlideshow = function updateImageSlideshow(newDirection) {
    if (isRTL) {
      reactSwipeEl.prev();
    } else {
      reactSwipeEl.next();
    }
    setImgSlideIndex([imgSlideIndex + newDirection, newDirection]);
    if (isRTL) {
      setRefIndex(refIndex - 1);
      setZoomIdx(zoomIdx - 1 < 0 ? images.length - 1 : zoomIdx - 1);
    } else {
      setZoomIdx(zoomIdx + 1 >= images.length ? 0 : zoomIdx + 1);
      setRefIndex(refIndex + 1);
    }
  };
  var displayArrows = function displayArrows() {
    if (props.showArrows == false) {
      return false;
    } else if (images.length == 1) {
      return false;
    }
    if (props.images) {
      if (props.images.length == 1) {
        return false;
      }
    }
    return true;
  };
  var initLoader = function initLoader(newIndex) {
    if (props.showLoader && props.images) {
      if (!isVideo(newIndex) && images[newIndex]['loaded'] != true) {
        setDisplayLoader(true);
      } else if (props.showLoader && props.images && images[newIndex]['loaded']) {
        setDisplayLoader(false);
      }
    }
  };
  var getImageCaption = function getImageCaption() {
    if (props.images) {
      return props.images[slideIndex].caption;
    }
    return "";
  };
  var getArrowStyle = function getArrowStyle() {
    if (arrowStyle == 'dark') {
      return styles.dark_icon;
    } else if (arrowStyle == 'light') {
      return styles.light_icon;
    }
  };
  var getIconStyle = function getIconStyle() {
    if (arrowStyle == 'dark') {
      return styles.dark_header_icon;
    } else if (arrowStyle == 'light') {
      return styles.light_header_icon;
    }
  };
  var setCurrentSlide = function setCurrentSlide(newIndex) {
    var newDirection;
    if (newIndex > imgSlideIndex) {
      newDirection = 1;
    } else {
      newDirection = -1;
    }
    setZoomIdx(newIndex);
    setImgSlideIndex([newIndex, newDirection]);
    reactSwipeEl.slide(newIndex, 500);
  };
  var dispatchOpenEvent = function dispatchOpenEvent() {
    if (props.onOpen) {
      props.onOpen();
    }
  };
  var dispatchCloseEvent = function dispatchCloseEvent() {
    if (props.onClose) {
      props.onClose();
    }
  };
  var closeModal = function closeModal() {
    setZoomIdx(0);
    if (isBrowserFullScreen) {
      exitFullScreen();
    }
    if (isSlideshowPlaying) {
      setIsSlideshowPlaying(false);
    }
    setShowModal(false);
    setIsOpen(false);
  };
  var openModal = function openModal(num) {
    setImgSlideIndex([num, 1]);
    setShowModal(true);
    setIsOpen(true);
  };
  var setItemLoaded = function setItemLoaded(index) {
    if (props.images) {
      images[index]['loaded'] = true;
      setImages(images);
    }
  };
  var setImagesItemLoaded = function setImagesItemLoaded(index) {
    var imgs = images;
    imgs[index]['loaded'] = true;
    setImages(imgs);
  };
  var nextSlide = function nextSlide() {
    initLoader((imgSlideIndex + 1) % images.length);
    resetVideo();
    resetImage();
    reactSwipeEl.next();
    setRefIndex(refIndex + 1);
    setImgSlideIndex([imgSlideIndex + 1, 1]);
    setZoomIdx(zoomIdx + 1 >= images.length ? 0 : zoomIdx + 1);
  };
  var prevSlide = function prevSlide() {
    initLoader((imgSlideIndex - 1) % images.length);
    resetVideo();
    resetImage();
    reactSwipeEl.prev();
    setRefIndex(refIndex - 1);
    setZoomIdx(zoomIdx - 1 < 0 ? images.length - 1 : zoomIdx - 1);
    setImgSlideIndex([imgSlideIndex - 1, 1]);
  };
  var pauseVideo = function pauseVideo() {
    if (videoCurrentlyPlaying) {
      if (videoReferences.current[slideIndex]) {
        videoReferences.current[slideIndex].pause();
      }
    }
    setVideoCurrentlyPlaying(false);
  };
  var openModalWithSlideNum = function openModalWithSlideNum(index) {
    var reactSwipeOptionConfig = reactSwipeOptions;
    reactSwipeOptionConfig.startSlide = index;
    setReactSwipeOptions(reactSwipeOptionConfig);
    setZoomIdx(index);
    openModal(index);
  };
  var saveImage = function saveImage() {
    if (props.images.length > 0) {
      if (props.images[slideIndex].original) {
        fileSaver.saveAs(props.images[slideIndex].original, 'image.jpg');
      } else {
        fileSaver.saveAs(props.images[slideIndex]['src'], 'image.jpg');
      }
    } else {
      if (images[slideIndex].src) {
        fileSaver.saveAs(images[slideIndex].src, 'image.jpeg');
      }
    }
  };
  var playSlideshow = function playSlideshow() {
    setMagnifyingGlass(false);
    if (isRTL) {
      updateImageSlideshow(-1);
    } else {
      updateImageSlideshow(1);
    }
    setIsSlideshowPlaying(true);
  };
  var stopSlideshow = function stopSlideshow() {
    setIsSlideshowPlaying(false);
  };
  var resetVideo = function resetVideo() {
    if (videoCurrentlyPlaying) {
      pauseVideo();
    }
    if (props.images) {
      if (props.images[slideIndex].type == 'yt') {
        var elem = props.images[slideIndex];
        videoReferences.current[slideIndex].src = "https://www.youtube.com/embed/" + elem.videoID + "?" + (shouldAutoplay(elem) ? 'autoplay=1' : '');
      }
    }
  };
  var resetImage = function resetImage() {
    if (enableMagnifyingGlass) {
      initMagnifyingGlass();
    } else {
      if (zoomReferences.current[zoomIdx] != null) {
        zoomReferences.current[zoomIdx].resetTransform();
      }
    }
  };
  var getThumbnailImgSrc = function getThumbnailImgSrc(img, index) {
    if (isVideo(index) && img.thumbnail) {
      return img.thumbnail;
    } else {
      return img.src;
    }
  };
  var getThumbnailImgSrcNext = function getThumbnailImgSrcNext(img, index) {
    if (isVideo(index)) {
      return img.thumbnail;
    } else {
      var img_src = img.src;
      if (typeof img_src === 'object' && !Array.isArray(img_src) && img_src !== null) {
        return img_src.src;
      } else {
        return img_src;
      }
    }
  };
  var initWrapperClassname = function initWrapperClassname() {
    if (props.className) {
      return props.className + " " + styles.lightboxjs;
    }
    return styles.lightboxjs;
  };
  var initStyling = function initStyling() {
    if (props.theme) {
      if (themes[props.theme]) {
        setBackgroundColor(themes[props.theme].background);
        setTextColor(themes[props.theme].textColor);
      }
    }
    if (props.fullScreen) {
      if (props.fullScreen == true) {
        setImgAnimation('fade');
        setIsRounded(false);
      }
    }
  };
  var imageSlideElement = function imageSlideElement(index) {
    var imageElem;
    if (!props.images) {
      imageElem = React.createElement("img", {
        className: (props.fullScreen ? styles.fullScreenLightboxImg : styles.lightbox_img) + " \n            " + (enableMagnifyingGlass ? ' maxWidthFull' : ' maxWidthWithoutMagnifier') + " imageModal",
        style: getImageStyle(),
        ref: imageRef,
        loading: 'lazy',
        src: images[index].original ? images[index].original : images[index].src,
        onLoad: function onLoad() {
          if (index == slideIndex) {
            setDisplayLoader(false);
          }
          if (props.images) {
            setItemLoaded(index);
          } else {
            setImagesItemLoaded(index);
          }
        },
        id: 'img'
      });
    } else if (props.images && props.render) {
      imageElem = props.render.imgSlide(props.images[index]);
    } else {
      var img_link;
      if (props.images) {
        if (typeof images[index].src === 'object' && !Array.isArray(images[index].src) && images[index].src !== null) {
          var _images$index$src;
          img_link = (_images$index$src = images[index].src) === null || _images$index$src === void 0 ? void 0 : _images$index$src.src;
        } else if (props.coverImageInLightbox == true) {
          img_link = images[index].src;
        } else {
          img_link = images[index].src;
        }
      }
      imageElem = React.createElement("img", {
        className: (props.fullScreen ? styles.fullScreenLightboxImg : styles.lightbox_img) + " \n            " + (enableMagnifyingGlass ? ' maxWidthFull' : ' maxWidthWithoutMagnifier') + " imageModal",
        ref: imageRef,
        loading: 'lazy',
        style: getImageStyle(),
        src: images[index].original ? images[index].original : img_link,
        onLoad: function onLoad() {
          if (index == slideIndex) {
            setDisplayLoader(false);
          }
          if (props.images) {
            setItemLoaded(index);
          } else {
            setImagesItemLoaded(index);
          }
        },
        id: 'img'
      });
    }
    return imageElem;
  };
  var getLightboxElem = function getLightboxElem(index) {
    if (isVideo(index)) {
      return videoSlideElement(index);
    } else if (isPictureElement(index)) {
      var elem_metadata = props.images[index]["picture"];
      return React.createElement("picture", {
        className: "imageModal \n      " + (props.fullScreen ? styles.fullScreenLightboxImg : styles.lightbox_img) + " \n      " + (enableMagnifyingGlass ? styles.maxWidthFull : styles.maxWidthWithoutMagnifier) + " "
      }, Object.keys(elem_metadata).map(function (format) {
        return React.createElement("source", {
          type: format,
          key: format,
          srcSet: elem_metadata[format].srcSet
        });
      }), React.createElement("img", {
        src: elem_metadata['fallback']
      }));
    } else {
      if (images && props.render || frameworkID == 'next') {
        return imageSlideElement(index);
      } else {
        return React.createElement("img", {
          className: "imageModal \n          " + (props.fullScreen ? styles.fullScreenLightboxImg : styles.lightbox_img) + " \n          " + (enableMagnifyingGlass ? styles.maxWidthFull : styles.maxWidthWithoutMagnifier) + " ",
          ref: imageRef,
          loading: 'lazy',
          style: getImageStyle(),
          src: images && images[index].original ? images[index].original : images[index].src,
          onLoad: function onLoad() {
            if (index == slideIndex) {
              setDisplayLoader(false);
            }
            if (props.images) {
              setItemLoaded(index);
            } else {
              setImagesItemLoaded(index);
            }
          },
          id: 'img'
        });
      }
    }
  };
  var isVideo = function isVideo(index) {
    if (props.images) {
      var elem = props.images[index];
      if (elem) {
        if (elem.type == 'yt' || elem.type == 'htmlVideo') {
          return true;
        }
      }
    }
    return false;
  };
  var isPictureElement = function isPictureElement(index) {
    if (props.images) {
      var elem = props.images[index];
      if (elem) {
        if (elem.picture) {
          return true;
        }
      }
    }
    return false;
  };
  var isHTMLVideo = function isHTMLVideo(index) {
    if (props.images) {
      if (props.images && props.images[index].type == 'htmlVideo') {
        return true;
      }
    }
    return false;
  };
  var videoSlideElement = function videoSlideElement(index) {
    var elem = props.images[index];
    var videoElem;
    if (elem.type == 'yt') {
      videoElem = React.createElement("div", {
        className: styles.videoOuterContainer + " imageModal"
      }, React.createElement("iframe", {
        className: "" + styles.ytVideo,
        width: getVideoWidth(elem),
        height: getVideoHeight(elem),
        ref: function ref(el) {
          return videoReferences.current[index] = el;
        },
        src: "https://www.youtube.com/embed/" + elem.videoID + "?" + (shouldAutoplay(elem) ? 'autoplay=1' : ''),
        title: 'YouTube video player',
        frameBorder: '0',
        allow: 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share',
        allowFullScreen: true,
        onLoad: function onLoad() {
          if (index == slideIndex) {
            setDisplayLoader(false);
          }
          setItemLoaded(index);
        }
      }));
    } else if (elem.type == 'htmlVideo') {
      videoElem = React.createElement("div", {
        className: styles.htmlVideo + " " + styles.htmlVideoOuterContainer + " imageModal"
      }, React.createElement("video", {
        className: styles.cursorPointer + " " + styles.lightboxVideo,
        width: getVideoWidth(elem),
        ref: function ref(el) {
          return videoReferences.current[index] = el;
        },
        onPlay: function onPlay() {
          setVideoCurrentlyPlaying(true);
        },
        height: getVideoHeight(elem),
        autoPlay: index == imgSlideIndex ? shouldAutoplay(elem) : false,
        controls: true
      }, React.createElement("source", {
        src: elem.videoSrc,
        type: 'video/mp4',
        onLoad: function onLoad() {
          setItemLoaded(index);
        }
      })));
    }
    return videoElem;
  };
  var regularImgPaneNodes = Array.apply(null, Array(images.length)).map(function (_, index) {
    return React.createElement("div", {
      key: index
    }, enableMagnifyingGlass == true ? React.createElement(Magnifier, {
      src: images[index].src,
      className: styles.magnifyWrapper + " " + styles.lightbox_img,
      height: imgContainHeight,
      width: imgContainWidth,
      mgShowOverflow: false
    }) : React.createElement("div", {
      className: "" + styles.slidePane
    }, React.createElement(reactZoomPanPinch.TransformWrapper, {
      ref: function ref(el) {
        return zoomReferences.current[index] = el;
      },
      onWheel: wheelEvent,
      disabled: disableZoom,
      key: index,
      onZoom: zoomEvent,
      centerZoomedOut: true,
      initialScale: 1
    }, React.createElement(reactZoomPanPinch.TransformComponent, {
      wrapperStyle: {
        width: '100vw',
        height: '100vh',
        margin: 'auto'
      },
      contentStyle: props.fullScreen ? {
        width: '100vw',
        height: '100vh',
        marginLeft: 'auto',
        marginRight: 'auto'
      } : {
        width: '100vw',
        height: '100vh',
        margin: 'auto',
        display: 'grid'
      },
      key: index
    }, React.createElement("div", {
      className: (props.fullScreen ? styles.slideshow_img_fullscreen : styles.slideshow_img) + " " + (props.lightboxImgClass ? props.lightboxImgClass : "")
    }, getLightboxElem(index))))));
  });
  var initMagnifyingGlass = function initMagnifyingGlass() {
    if (!enableMagnifyingGlass) {
      initImageDimensions();
    } else {
      setImgAnimation('imgDrag');
    }
    setMagnifyingGlass(!enableMagnifyingGlass);
  };
  var initImageDimensions = function initImageDimensions() {
    var img;
    if (imgSlideIndex == 0 || imgSlideIndex % images.length == 0) {
      img = document.getElementById('img');
    } else {
      img = imageRef.current;
    }
    var ratio = img.naturalWidth / img.naturalHeight;
    var width = img.height * ratio;
    var height = img.height;
    if (width > img.width) {
      width = img.width;
      height = img.width / ratio;
    }
    setImgContainHeight(height);
    setImgContainWidth(width);
  };
  var initFullScreenChangeEventListeners = function initFullScreenChangeEventListeners() {
    document.addEventListener('fullscreenchange', exitFullScreenHandler);
    document.addEventListener('webkitfullscreenchange', exitFullScreenHandler);
    document.addEventListener('MSFullscreenChange', exitFullScreenHandler);
    document.addEventListener('mozfullscreenchange', exitFullScreenHandler);
  };
  var removeFullScreenChangeEventListeners = function removeFullScreenChangeEventListeners() {
    document.removeEventListener('fullscreenchange', exitFullScreenHandler);
    document.removeEventListener('webkitfullscreenchange', exitFullScreenHandler);
    document.removeEventListener('MSFullscreenChange', exitFullScreenHandler);
    document.removeEventListener('mozfullscreenchange', exitFullScreenHandler);
  };
  var initEventListeners = function initEventListeners() {
    if (isBrowser()) {
      window.addEventListener('resize', handleWindowResize);
    }
  };
  var removeEventListeners = function removeEventListeners() {
    if (isBrowser()) {
      window.removeEventListener('resize', handleWindowResize);
    }
  };
  var setReducedMotion = function setReducedMotion(mediaQuery) {
    if (mediaQuery.matches) {
      setImgAnimation('fade');
    }
  };
  var checkAndInitReducedMotion = function checkAndInitReducedMotion() {
    var reducedMotionMediaQuery = '';
    if (isBrowser()) {
      reducedMotionMediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');
      if (!reducedMotionMediaQuery || reducedMotionMediaQuery.matches) {
        setImgAnimation('fade');
      }
      reducedMotionMediaQuery.addEventListener('change', setReducedMotion(reducedMotionMediaQuery));
    }
    return reducedMotionMediaQuery;
  };
  var initPropsForControlIcons = function initPropsForControlIcons() {
    if (props.showFullScreenIcon != undefined) {
      setDisplayFullScreenIcon(props.showFullScreenIcon);
    }
    if (props.showThumbnailIcon != undefined) {
      setDisplayThumbnailIcon(props.showThumbnailIcon);
    }
    if (props.showSlideshowIcon != undefined) {
      setDisplaySlideshowIcon(props.showSlideshowIcon);
    }
    if (props.showMagnificationIcons != undefined) {
      setDisplayMagnificationIcons(props.showMagnificationIcons);
    }
  };
  var initProps = function initProps() {
    if (props.showControls != undefined) {
      setShowControls(props.showControls);
    }
    initPropsForControlIcons();
    if (props.disableImageZoom) {
      setDisableZoom(props.disableImageZoom);
    }
    if (isBrowser()) {
      setWidth(window.innerWidth);
    }
    if (window.innerWidth <= mobileWidth) {
      setImgAnimation('fade');
    }
  };
  usehooksTs.useInterval(function () {
    if (isRTL) {
      updateImageSlideshow(-1);
    } else {
      updateImageSlideshow(1);
    }
  }, isSlideshowPlaying ? slideshowInterval : null);
  var openFullScreen = function openFullScreen(lightbox_elem) {
    if (lightbox_elem.requestFullscreen) {
      lightbox_elem.requestFullscreen();
    } else if (lightbox_elem.webkitRequestFullscreen) {
      lightbox_elem.webkitRequestFullscreen();
    } else if (lightbox_elem.msRequestFullscreen) {
      lightbox_elem.msRequestFullscreen();
    }
  };
  var closeFullScreen = function closeFullScreen(document) {
    if (document.exitFullscreen) {
      document.exitFullscreen();
    } else if (document.webkitExitFullscreen) {
      document.webkitExitFullscreen();
    } else if (document.msExitFullscreen) {
      document.msExitFullscreen();
    }
  };
  var isBrowser = function isBrowser() {
    return typeof window !== "undefined";
  };
  var initRTLImages = function initRTLImages() {
    var imagesMetadataCopy = props.images;
    imagesMetadataCopy.reverse();
    setImages(imagesMetadataCopy);
    if (images.length > 0) {
      var imagesRTLCopy = images;
      imagesRTLCopy.reverse();
      setImages(imagesRTLCopy);
    }
  };
  var initImages = function initImages(isMounted, updateImages) {
    if (coverMode && props.images) {
      if (props.coverImageInLightbox == false) {
        var filterImages = props.images.filter(function (img) {
          return img.cover != true;
        });
        setImages(filterImages);
      } else {
        setImages(props.images);
      }
    }
    if (updateImages || !isInit) {
      if (lightboxIdentifier && props.children) {
        var img_gallery = document.querySelectorAll("[data-lightboxjs=" + lightboxIdentifier + "]");
        var img_elements = [];
        if (img_gallery.length > 0) {
          var _loop = function _loop(i) {
            var img = img_gallery[i];
            var attr_val = img.getAttribute('data-lightboxjs');
            if (attr_val == lightboxIdentifier) {
              img.addEventListener('click', function () {
                var index;
                if (isRTL) {
                  index = getRTLIndex(img_gallery.length, i);
                } else {
                  index = i;
                }
                var reactSwipeOptionConfig = reactSwipeOptions;
                reactSwipeOptionConfig.startSlide = index;
                if (isMounted) setReactSwipeOptions(reactSwipeOptionConfig);
                setZoomIdx(index);
                openModal(index);
              }, false);
              img.classList.add('cursor-pointer');
              if (img.src) {
                img_elements.push({
                  src: img.src,
                  alt: img.alt,
                  loaded: 'false'
                });
              } else if (img.tagName == 'DIV') {
                var corresponding_img_item = props.images[i];
                var img_src = corresponding_img_item.src;
                var img_alt = corresponding_img_item.alt;
                img_elements.push({
                  src: img_src,
                  alt: img_alt,
                  loaded: 'false'
                });
              }
            }
          };
          for (var i = 0; i <= img_gallery.length - 1; i++) {
            _loop(i);
          }
          if (isMounted && !coverMode) {
            if (props.showAllImages != true && props.framework != "next") {
              setImages(img_elements);
            } else if (props.framework == "next") {
              setImages(props.images);
            } else {
              setImages(props.images);
            }
          }
        } else {
          if (props.images) {
            setImages(props.images);
          }
        }
      } else if (lightboxIdentifier && props.images && !props.children) {
        setImages(props.images);
      } else if (!lightboxIdentifier && props.images && !props.children) {
        setImages(props.images);
      } else if (!props.render) {
        var imgArray = [];
        if (!Array.isArray(props.children)) {
          imgArray.push(props.children);
        } else {
          imgArray = props.children;
        }
        var imgs = [];
        for (var k = 0; k < imgArray.length; k++) {
          var img_elem = imgArray[k];
          var img_obj = {
            src: img_elem.props.src,
            alt: img_elem.props.alt,
            loaded: 'false'
          };
          imgs.push(img_obj);
        }
        if (isRTL) {
          imgs.reverse();
        }
        if (isMounted) setImages(imgs);
        setPreviewImageElems(imgArray);
      } else {
        if (isMounted) {
          setImages(props.images);
        }
      }
      if (isMounted) setIsInit(true);
    }
  };
  React.useEffect(function () {
    initImages(true, true);
  }, [props.images, props.displayedImages]);
  React.useEffect(function () {
    var slideNum = 0;
    if (props.open) {
      if (props.startingSlideIndex) {
        if (props.startingSlideIndex < images.length && props.startingSlideIndex >= 0) {
          slideNum = props.startingSlideIndex;
        } else {
          slideNum = 0;
        }
      }
      openModalWithSlideNum(slideNum);
    } else if (props.open == false) {
      closeModal();
    }
  }, [props.open]);
  React.useEffect(function () {
    if (isOpen == true) {
      dispatchOpenEvent();
    } else {
      dispatchCloseEvent();
    }
  }, [isOpen]);
  React.useEffect(function () {
    if (props.render) {
      if (!props.images) {
        console.error('Array of images must be passed to `SlideshowLightbox` (with the `images` prop) if using custom render method. ');
      }
    }
    var isMounted = true;
    if (isMounted) initProps();
    if (coverMode && props.images) {
      if (props.coverImageInLightbox == false) {
        var filterImages = props.images.filter(function (img) {
          return img.cover != true;
        });
        setImages(filterImages);
      } else {
        setImages(props.images);
      }
    }
    if (isMounted) {
      initEventListeners();
    }
    var reducedMotionMediaQuery = checkAndInitReducedMotion();
    if (!isInit) {
      initImages(isMounted, false);
      if (props.images && isRTL == true) {
        initRTLImages();
      }
    }
    if (isMounted) initStyling();
    return function () {
      isMounted = false;
      removeEventListeners();
      reducedMotionMediaQuery.removeEventListener('change', reducedMotionMediaQuery);
    };
  }, []);
  var reactSwipeEl;
  return React.createElement("div", null, React.createElement("div", {
    className: "" + initWrapperClassname()
  }, props.images && props.children && lightboxIdentifier == false ? props.children : null, props.images && lightboxIdentifier == false ? props.images.map(function (elem, index) {
    return React.createElement("img", {
      className: "" + styles.cursorPointer,
      src: elem.src,
      onClick: function onClick() {
        var img_index;
        if (isRTL) {
          img_index = getRTLIndex(props.images.length, index);
        } else {
          img_index = index;
        }
        openModalWithSlideNum(img_index);
      },
      key: index
    });
  }) : null, lightboxIdentifier != false && props.children && coverMode == false ? props.children : null, lightboxIdentifier == false && props.images || coverMode == true ? null : previewImageElems.filter(function (elem) {
    return elem.type == 'img';
  }).map(function (elem, index) {
    return React.createElement("img", Object.assign({}, elem.props, {
      className: (elem.props.className ? elem.props.className : '') + " " + styles.cursorPointer,
      onClick: function onClick() {
        var img_index;
        if (isRTL) {
          img_index = getRTLIndex(previewImageElems.length, index);
        } else {
          img_index = index;
        }
        openModalWithSlideNum(img_index);
      },
      key: index
    }));
  }), coverMode ? props.children : false, React.createElement(framerMotion.AnimateSharedLayout, {
    type: 'crossfade'
  }, React.createElement(framerMotion.AnimatePresence, {
    initial: false
  }, showModal !== false && React.createElement(reactPortal.Portal, null, React.createElement(Div100vh, null, React.createElement(framerMotion.motion.div, {
    className: "" + styles.slideshowAnimContainer,
    key: 'slideshowAnimContainer',
    id: 'slideshowAnim',
    style: {
      backgroundColor: backgroundColor
    },
    initial: {
      opacity: 0,
      scale: 0.98
    },
    exit: {
      opacity: 0,
      scale: 0.98
    },
    animate: {
      opacity: 1,
      scale: 1
    },
    transition: {
      duration: 0.2
    }
  }, React.createElement("div", {
    className: "" + styles.lightboxContainer,
    onClick: function onClick(e) {
      if (modalCloseOption == "clickOutside") {
        checkModalClick(e);
      }
    }
  }, React.createElement("section", {
    className: styles.iconsHeader + " " + (iconColor ? '' : getIconStyle()) + " imageModal",
    style: {
      color: iconColor
    }
  }, React.createElement(KeyHandler, {
    keyValue: 'ArrowLeft',
    code: '37',
    onKeyHandle: function onKeyHandle() {
      prevSlide();
    }
  }), React.createElement(KeyHandler, {
    keyValue: 'ArrowRight',
    code: '39',
    onKeyHandle: function onKeyHandle() {
      nextSlide();
    }
  }), React.createElement(KeyHandler, {
    keyValue: 'Escape',
    code: '27',
    onKeyHandle: function onKeyHandle() {
      if (!isBrowserFullScreen) {
        closeModal();
      }
    }
  }), React.createElement(KeyHandler, {
    keyValue: 'Left',
    code: '37',
    onKeyHandle: function onKeyHandle() {
      prevSlide();
    }
  }), React.createElement(KeyHandler, {
    keyValue: 'Right',
    code: '39',
    onKeyHandle: function onKeyHandle() {
      nextSlide();
    }
  }), React.createElement(KeyHandler, {
    keyValue: 'Esc',
    code: '27',
    onKeyHandle: function onKeyHandle() {
      if (!isBrowserFullScreen) {
        closeModal();
      }
    }
  }), showControls && React.createElement("div", {
    className: "" + styles.controls
  }, disableZoom || displayMagnificationIcons == false ? null : React.createElement(framerMotion.motion.div, null, React.createElement(reactBootstrapIcons.ZoomIn, {
    size: 24,
    color: iconColor ? iconColor : undefined,
    className: styles.lightboxjs_icon + " " + (iconColor ? '' : getIconStyle()),
    style: iconColor ? {
      color: iconColor
    } : {},
    onClick: function onClick() {
      if (enableMagnifyingGlass) {
        initMagnifyingGlass();
      }
      if (zoomReferences.current[zoomIdx] != null) {
        zoomReferences.current[zoomIdx].zoomIn();
      }
    }
  })), disableZoom || displayMagnificationIcons == false ? null : React.createElement(framerMotion.motion.div, null, React.createElement(reactBootstrapIcons.ZoomOut, {
    size: 24,
    className: styles.lightboxjs_icon + " " + (iconColor ? '' : getIconStyle()),
    style: iconColor ? {
      color: iconColor
    } : {},
    color: iconColor ? iconColor : undefined,
    onClick: function onClick() {
      zoomReferences.current[zoomIdx].zoomOut();
    }
  })), displayDownloadBtn() ? React.createElement(reactBootstrapIcons.Download, {
    size: 24,
    className: styles.lightboxjs_icon + " " + (iconColor ? '' : getIconStyle()),
    style: iconColor ? {
      color: iconColor
    } : {},
    color: iconColor ? iconColor : undefined,
    onClick: function onClick() {
      saveImage();
    }
  }) : null, displayFullScreenIcon ? isBrowserFullScreen ? React.createElement(framerMotion.motion.div, null, React.createElement(reactBootstrapIcons.FullscreenExit, {
    size: 24,
    className: styles.lightboxjs_icon + " " + (iconColor ? '' : getIconStyle()),
    style: iconColor ? {
      color: iconColor
    } : {},
    color: iconColor ? iconColor : undefined,
    onClick: function onClick() {
      isBrowserFullScreen ? exitFullScreen() : fullScreen();
    }
  })) : React.createElement(framerMotion.motion.div, null, React.createElement(reactBootstrapIcons.Fullscreen, {
    size: 24,
    className: styles.lightboxjs_icon + " " + (iconColor ? '' : getIconStyle()),
    style: iconColor ? {
      color: iconColor
    } : {},
    color: iconColor ? iconColor : undefined,
    onClick: function onClick() {
      isBrowserFullScreen ? exitFullScreen() : fullScreen();
    }
  })) : null, displayThumbnailIcon ? React.createElement(framerMotion.motion.div, null, React.createElement(reactBootstrapIcons.GridFill, {
    size: 24,
    className: styles.lightboxjs_icon + " " + (iconColor ? '' : getIconStyle()),
    style: iconColor ? {
      color: iconColor
    } : {},
    color: iconColor ? iconColor : undefined,
    onClick: function onClick() {
      setShowThumbnails(!showThumbnails);
    }
  })) : null, shouldDisplayMagnifyingGlassIcon() ? React.createElement(framerMotion.motion.div, null, React.createElement(reactBootstrapIcons.Search, {
    size: 24,
    className: styles.lightboxjs_icon + " " + (iconColor ? '' : getIconStyle()),
    style: iconColor ? {
      color: iconColor
    } : {},
    color: iconColor ? iconColor : undefined,
    onClick: function onClick() {
      return initMagnifyingGlass();
    }
  })) : null, shouldDisplaySlideshowIcon() ? React.createElement(framerMotion.motion.div, {
    className: styles.slideshowPlayBtn
  }, isSlideshowPlaying ? React.createElement(reactBootstrapIcons.PauseCircleFill, {
    size: 24,
    className: styles.lightboxjs_icon + " " + (iconColor ? '' : getIconStyle()),
    style: iconColor ? {
      color: iconColor
    } : {},
    color: iconColor ? iconColor : undefined,
    onClick: function onClick() {
      isSlideshowPlaying ? stopSlideshow() : playSlideshow();
    }
  }) : React.createElement(reactBootstrapIcons.PlayCircleFill, {
    size: 24,
    className: styles.lightboxjs_icon + " " + (iconColor ? '' : getIconStyle()),
    style: iconColor ? {
      color: iconColor
    } : {},
    color: iconColor ? iconColor : undefined,
    onClick: function onClick() {
      isSlideshowPlaying ? stopSlideshow() : playSlideshow();
    }
  })) : null), React.createElement(framerMotion.motion.div, {
    className: styles.closeIcon
  }, React.createElement(reactBootstrapIcons.XLg, {
    size: 24,
    className: styles.lightboxjs_icon + " " + (iconColor ? '' : getIconStyle()),
    color: iconColor ? iconColor : undefined,
    style: iconColor ? {
      color: iconColor
    } : {},
    onClick: function onClick() {
      closeModal();
    }
  }))), displayArrows() ? React.createElement("div", null, React.createElement("div", {
    className: rightArrowStyle ? styles.next1 + " " + getArrowStyle() + " imageModal" : "imageModal",
    style: rightArrowStyle,
    onClick: function onClick() {
      nextSlide();
    }
  }, nextArrowElem ? nextArrowElem : React.createElement("span", {
    className: "" + (props.rightArrowClassname ? props.rightArrowClassname : "")
  }, "\u276F")), React.createElement("div", {
    className: leftArrowStyle ? styles.prev1 + " " + getArrowStyle() + " imageModal" : "imageModal",
    style: leftArrowStyle,
    onClick: function onClick() {
      prevSlide();
    }
  }, prevArrowElem ? prevArrowElem : React.createElement("span", {
    className: "" + (props.leftArrowClassname ? props.leftArrowClassname : "")
  }, "\u276E"))) : null, React.createElement(framerMotion.AnimatePresence, {
    initial: false,
    custom: direction
  }, React.createElement(ReactSwipe, {
    className: (showThumbnails ? styles.slideshowInnerContainerThumbnails : '') + " " + (isImageCaption() ? styles.slideImageAndCaption : '') + " \n                    " + (props.fullScreen ? styles.slideshowInnerContainerFullScreen : styles.slideshowInnerContainer) + "  ",
    swipeOptions: reactSwipeOptions,
    ref: function ref(el) {
      return reactSwipeEl = el;
    },
    childCount: images.length
  }, regularImgPaneNodes), displayLoader == true && !isHTMLVideo(slideIndex) ? React.createElement("span", {
    key: 'loader',
    className: styles.loader + " " + getLoaderThemeClass()
  }) : null), React.createElement("div", {
    className: styles.thumbnailsOuterContainer + " " + (isImageCaption() ? styles.thumbnailsAndCaption : ''),
    style: isImageCaption() ? {
      backgroundColor: backgroundColor
    } : {}
  }, isImageCaption() && !zoomedIn ? React.createElement("div", {
    className: styles.imgTitleContainer + " imageModal"
  }, React.createElement("p", {
    className: "" + styles.imgTitle,
    key: 'imgCaption' + slideIndex,
    style: props.captionStyle ? props.captionStyle : {
      color: textColor
    }
  }, getImageCaption())) : null, React.createElement(framerMotion.AnimatePresence, {
    initial: animatedThumbnails
  }, showThumbnails !== false && React.createElement(framerMotion.motion.div, {
    initial: 'hidden',
    exit: 'hidden',
    animate: 'visible',
    style: imagesLoaded ? {} : {
      display: 'displayHidden'
    },
    transition: {
      type: 'spring',
      duration: 0.75
    },
    variants: thumbnailVariants,
    className: styles.thumbnails + " " + (isImageCaption() ? styles.thumbnailsWithCaption : '')
  }, React.createElement(ScrollContainer, {
    className: 'scroll-container',
    vertical: true,
    horizontal: false,
    hideScrollbars: false
  }, frameworkID == 'next' && props.images ? props.images.map(function (img, index) {
    return React.createElement("img", {
      className: styles.thumbnail + " imageModal",
      src: getThumbnailImgSrcNext(img, index),
      style: slideIndex === index ? {
        border: thumbnailBorder
      } : {
        border: inactiveThumbnailBorder
      },
      key: index,
      onClick: function onClick() {
        thumbnailClick(index);
      },
      alt: img.alt,
      onLoad: function onLoad() {
        return setImagesLoaded(true);
      }
    });
  }) : images.map(function (img, index) {
    return React.createElement("img", {
      src: getThumbnailImgSrc(img, index),
      style: slideIndex === index ? {
        border: thumbnailBorder
      } : {
        border: inactiveThumbnailBorder
      },
      className: styles.thumbnail + " imageModal",
      key: index,
      onClick: function onClick() {
        thumbnailClick(index);
      },
      alt: img.alt,
      onLoad: function onLoad() {
        return setImagesLoaded(true);
      }
    });
  })))))))))))));
};

var themes$1 = {
  day: {
    background: 'white',
    iconColor: 'black',
    thumbnailBorder: 'solid transparent 2px',
    textColor: 'black'
  },
  night: {
    background: '#151515',
    iconColor: 'silver',
    thumbnailBorder: 'solid rgb(107, 133, 206)  2px',
    textColor: 'silver'
  },
  lightbox: {
    background: 'rgba(12, 12, 12, 0.93)',
    iconColor: 'silver',
    thumbnailBorder: 'solid rgb(107, 133, 206) 2px',
    textColor: 'silver'
  }
};
var defaultTheme$1 = "lightbox";
var AnimImage = function AnimImage(props) {
  var _useState = React.useState(props.backgroundColor ? props.backgroundColor : themes$1[defaultTheme$1].background),
    backgroundColor = _useState[0],
    setBackgroundColor = _useState[1];
  var _useState2 = React.useState(props.iconColor ? props.iconColor : themes$1[defaultTheme$1].iconColor),
    iconColor = _useState2[0],
    setIconColor = _useState2[1];
  var _React$useState = React__default.useState(),
    state = _React$useState[0];
  React.useEffect(function () {
    if (props.theme) {
      if (themes$1[props.theme]) {
        setBackgroundColor(themes$1[props.theme].background);
        setIconColor(themes$1[props.theme].iconColor);
      }
    }
    return function () {};
  }, [state]);
  return React__default.createElement(SlideshowLightbox, {
    backgroundColor: backgroundColor,
    iconColor: iconColor,
    showThumbnails: false,
    theme: props.theme,
    showArrows: false,
    showThumbnailIcon: false,
    showSlideshowIcon: false
  }, React__default.createElement("img", {
    src: props.image.src,
    alt: props.image.title
  }));
};

var initLightboxJS = function initLightboxJS(licenseKey, plan_type) {
  var body = {
    license_key: licenseKey,
    plan_type: plan_type
  };
  axios.post('https://lightboxjs-server.herokuapp.com/license', body).then(function (response) {
    var licenseKeyValid = response.data.license_valid;
    if (!licenseKeyValid) {
      console.warn("Lightbox.js: Invalid license key specified, a valid license key must be provided.");
    }
  })["catch"](function (error) {
    console.log(error);
  });
};

exports.Image = AnimImage;
exports.SlideshowLightbox = SlideshowLightbox;
exports.initLightboxJS = initLightboxJS;
//# sourceMappingURL=index.js.map
