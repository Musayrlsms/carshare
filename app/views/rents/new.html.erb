<script src="https://js.stripe.com/v3/"></script>

<section class="pt-4 pt-md-5">
	<div class="container">
		<div class="row g-4">
			<div class="col-xl-9 mx-auto">
				<div class="vstack gap-4">

					<!-- Booking summary START -->
					<div class="card shadow">
						<!-- Card header -->
						<div class="card-header border-bottom p-4">
							<h1 class="mb-0 fs-3">Booking summary</h1>
						</div>

						<!-- Card body START -->
						<div class="card-body p-4">
							<div class="row g-md-4">
								<!-- Image -->
								<div class="col-md-3">
									<div class="bg-light rounded-3 px-4 py-5 mb-3 mb-md-0">
										<img src="assets/images/category/cab/seadan.svg" alt="">
									</div>
								</div>

								<!-- Card and address detail -->
								<div class="col-md-9">
									<!-- Title -->
									<h5 class="card-title mb-2"><%= @car.brand.name %> <%= @car.model.name %></h5>
									<ul class="nav nav-divider h6 fw-normal mb-2">
										<li class="nav-item"><%= @car.case_type %></li>
										<li class="nav-item">AC</li>
										<li class="nav-item"><%= @car.seat_count %> Seats</li>
									</ul>

									<!-- Pick up and drop address -->
									<div class="row">
										<div class="col-md-6">
											<small>Pickup address</small>
											<p class="h6 fw-light mb-md-0"><%= @car.address %></p>
										</div>

										<div class="col-md-6">
											<small>Drop address</small>
											<p class="h6 fw-light mb-0"><%= @car.address %></p>
										</div>
									</div>
								</div>

								<div class="col-md-6">
									<ul class="list-group list-group-borderless">
										<li class="list-group-item">
                      <div>
                        Journey Start Date: <span class="h6 fw-normal mb-0 ms-1">25 Nov 2022</span>
                      </div>
                    </li>
                    <li class="list-group-item">
                      <div>
                        Journey Finish Date: <span class="h6 fw-normal mb-0 ms-1">25 Nov 2022</span> </div>
                    </li>
										<li class="list-group-item">Distance:<span class="h6 fw-normal mb-0 ms-1"><%= @car.distance %> km</span></li>
									</ul>
								</div>
		
								<div class="col-md-6">
									<ul class="list-group list-group-borderless">
										<li class="list-group-item">Passengers:<span class="h6 fw-normal mb-0 ms-1"></span></li>
										<li class="list-group-item">Luggages:<span class="h6 fw-normal mb-0 ms-1">2</span></li>
									</ul>
								</div>
							</div>

							<!-- Title -->
							<h6 class="mb-0 mt-3">Passenger Detail</h6>

							<div class="row">
								<!-- List -->
								<div class="col-sm-8">
									<ul class="list-group list-group-borderless mb-0">
										<li class="list-group-item">Passenger Name:<span class="h6 mb-0 fw-normal ms-1"><%= current_user.name %></span></li>
										<li class="list-group-item">Passenger Email:<span class="h6 mb-0 fw-normal ms-1"><%= current_user.email %></span></li>
										<li class="list-group-item">Passenger Number:<span class="h6 mb-0 fw-normal ms-1"><%= current_user.phone %></span></li>
									</ul>
								</div>

								<!-- Price -->
								<div class="col-sm-4 text-sm-end mt-3 mt-sm-auto">
									<h6 class="mb-1 fw-normal">Total Amount</h6>
									<h2 class="mb-0 text-success">â‚¬<%= @total_amount %></h2>
								</div>
							</div>
						</div>	
						<!-- Card body END -->
					</div>
					<!-- Booking summary END -->

					<!-- Payment START -->
          <form id="payment-form" class="sr-payment-form">
            <div class="sr-form-row">
              <label for="card-element"></label>
              <div class="sr-input sr-card-element" id="card-element"></div>
            </div>
            <div class="sr-form-row">
              <label for="enabled-accounts-select"></label>
              <select id="enabled-accounts-select" style="display: none;" class="sr-select"></select>
            </div>
            <div class="sr-form-row">
              <div class="sr-field-error" id="card-errors" role="alert"></div>
              <button id="submit">
                <div class="spinner hidden" id="spinner"></div>
                <span id="button-text">Pay</span><span id="order-amount"></span>
              </button>
            </div>
          </form>
					<!-- Payment END -->
				</div>
			</div>
		</div>
	</div>
</section>


  <% if @rent.errors.any? %>
    <div style="color: red">
      <h2><%= pluralize(rent.errors.count, "error") %> prohibited this rent from being saved:</h2>

      <ul>
        <% @rent.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>



<script>
  var paymentForm = document.getElementById("payment-form");

  var paymentIntentData = {
    // You might send a list of items the customer is purchasing so that you can compute
    // the price on the server.
    items: [{ id: "photo-subscription" }],
    currency: "eur"
  };
  
  // Secret from the server, which we'll overwrite each time we create a new payment intent.
  var paymentIntentClientSecret = null;
  
  // Set up Stripe.js and Elements to use in checkout form
  var setupElements = function(data) {
    stripe = Stripe(data.publishableKey);
    const appearance = {
      theme: "flat"
    };
    const options = { /* options */ };
    console.log({ clientSecret: paymentIntentClientSecret })
    const elements = stripe.elements({clientSecret: paymentIntentClientSecret, appearance})

    var card = elements.create("payment", options);
    card.mount("#card-element");
  
    // Handle form submission.
    paymentForm.addEventListener("submit", function(event) {
      event.preventDefault();
      // Initiate payment when the submit button is clicked
      pay(stripe, elements, paymentIntentClientSecret);
    });
  };
  
  /*
    * Calls stripe.confirmCardPayment which creates a pop-up modal to
    * prompt the user to enter extra authentication details without leaving your page
    */
  var pay = function(stripe, elements, clientSecret) {
    changeLoadingState(true);
  
    // Initiate the payment.
    // If authentication is required, confirmCardPayment will automatically display a modal
    


    stripe
      .confirmPayment({
        elements,
        confirmParams: {
          return_url: `${window.location.origin}/payment-return`,
        }
      })
      .then(function(result) {
        if (result.error) {
          // Show error to your customer
          alert(result.error.message);
          changeLoadingState(false);
        } else {
          // The payment has been processed!
          alert(clientSecret);
        }
      });
  };
  
  const updatePaymentIntent = (account, shouldSetupElements = false) => {
    // Disable the button while we fetch the payment intent.
    paymentForm.querySelector("button").disabled = true;
  
    // The account will be used as the transfer_data[destination] parameter when creating the
    // PaymentIntent on the server side.
    paymentIntentData.account = account;
  
    fetch("create-payment-intent?" + (new URL(window.location)).searchParams.toString() , {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      },
      body: JSON.stringify(paymentIntentData)
    })
      .then(function(result) {
        return result.json();
      })
      .then(function(data) {
        paymentIntentClientSecret = data.clientSecret
        setupElements(data);
  
        paymentForm.querySelector("button").disabled = false;
      });
  }
  
  // When the selected account changes, create a new PaymentIntent on the server
  // side and update the front-end accordingly.
  window.addEventListener("DOMContentLoaded", (event) => {
    console.log("222")
    updatePaymentIntent("<%= @car.user.stripe_account.account_id %>");
  });

  /* ------- Post-payment helpers ------- */
  
  /* Shows a success / error message when the payment is complete */
  var orderComplete = function(clientSecret) {
    // Just for the purpose of the sample, show the PaymentIntent response object
    stripe.retrievePaymentIntent(clientSecret).then(function(result) {
      var paymentIntent = result.paymentIntent;
      var paymentIntentJson = JSON.stringify(paymentIntent, null, 2);
  
      document.querySelector(".sr-payment-form").classList.add("hidden");
      document.querySelector("pre").textContent = paymentIntentJson;
  
      document.querySelector(".sr-result").classList.remove("hidden");
      setTimeout(function() {
        document.querySelector(".sr-result").classList.add("expand");
      }, 200);
  
      changeLoadingState(false);
    });
  };
  
  var showError = function(errorMsgText) {
    changeLoadingState(false);
    var errorMsg = document.querySelector(".sr-field-error");
    errorMsg.textContent = errorMsgText;
    setTimeout(function() {
      errorMsg.textContent = "";
    }, 4000);
  };
  
  // Show a spinner on payment submission
  var changeLoadingState = function(isLoading) {
    if (isLoading) {
      document.querySelector("button").disabled = true;
      document.querySelector("#spinner").classList.remove("hidden");
      document.querySelector("#button-text").classList.add("hidden");
    } else {
      document.querySelector("button").disabled = false;
      document.querySelector("#spinner").classList.add("hidden");
      document.querySelector("#button-text").classList.remove("hidden");
    }
  };
  
</script>
<style>
    .hidden {
      display: none;
    }
    
    #payment-message {
      color: rgb(105, 115, 134);
      font-size: 16px;
      line-height: 20px;
      padding-top: 12px;
      text-align: center;
    }
    
    #payment-element {
      margin-bottom: 24px;
    }
    
    /* Buttons and links */
    button {
      background: #5469d4;
      font-family: Arial, sans-serif;
      color: #ffffff;
      border-radius: 4px;
      border: 0;
      padding: 12px 16px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      display: block;
      transition: all 0.2s ease;
      box-shadow: 0px 4px 5.5px 0px rgba(0, 0, 0, 0.07);
      width: 100%;
    }
    button:hover {
      filter: contrast(115%);
    }
    button:disabled {
      opacity: 0.5;
      cursor: default;
    }
    
    /* spinner/processing state, errors */
    .spinner,
    .spinner:before,
    .spinner:after {
      border-radius: 50%;
    }
    .spinner {
      color: #ffffff;
      font-size: 22px;
      text-indent: -99999px;
      margin: 0px auto;
      position: relative;
      width: 20px;
      height: 20px;
      box-shadow: inset 0 0 0 2px;
      -webkit-transform: translateZ(0);
      -ms-transform: translateZ(0);
      transform: translateZ(0);
    }
    .spinner:before,
    .spinner:after {
      position: absolute;
      content: "";
    }
    .spinner:before {
      width: 10.4px;
      height: 20.4px;
      background: #5469d4;
      border-radius: 20.4px 0 0 20.4px;
      top: -0.2px;
      left: -0.2px;
      -webkit-transform-origin: 10.4px 10.2px;
      transform-origin: 10.4px 10.2px;
      -webkit-animation: loading 2s infinite ease 1.5s;
      animation: loading 2s infinite ease 1.5s;
    }
    .spinner:after {
      width: 10.4px;
      height: 10.2px;
      background: #5469d4;
      border-radius: 0 10.2px 10.2px 0;
      top: -0.1px;
      left: 10.2px;
      -webkit-transform-origin: 0px 10.2px;
      transform-origin: 0px 10.2px;
      -webkit-animation: loading 2s infinite ease;
    animation: loading 2s infinite ease;
  }

  @-webkit-keyframes loading {
    0% {
      -webkit-transform: rotate(0deg);
      transform: rotate(0deg);
    }
    100% {
      -webkit-transform: rotate(360deg);
      transform: rotate(360deg);
    }
  }
  @keyframes loading {
    0% {
      -webkit-transform: rotate(0deg);
      transform: rotate(0deg);
    }
    100% {
      -webkit-transform: rotate(360deg);
      transform: rotate(360deg);
    }
  }

  @media only screen and (max-width: 600px) {
    form {
      width: 80vw;
      min-width: initial;
    }
  }
</style>